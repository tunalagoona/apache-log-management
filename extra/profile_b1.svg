<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>populate_logs (apache_log_manager/log_mgmt/log_processor.py:23) (148 samples, 1.01%)</title><rect x="0.0340%" y="180" width="1.0051%" height="15" fill="rgb(227,0,7)"/><text x="0.2840%" y="190.50"></text></g><g><title>get (requests/api.py:76) (148 samples, 1.01%)</title><rect x="0.0340%" y="196" width="1.0051%" height="15" fill="rgb(217,0,24)"/><text x="0.2840%" y="206.50"></text></g><g><title>request (requests/api.py:61) (148 samples, 1.01%)</title><rect x="0.0340%" y="212" width="1.0051%" height="15" fill="rgb(221,193,54)"/><text x="0.2840%" y="222.50"></text></g><g><title>request (requests/sessions.py:542) (148 samples, 1.01%)</title><rect x="0.0340%" y="228" width="1.0051%" height="15" fill="rgb(248,212,6)"/><text x="0.2840%" y="238.50"></text></g><g><title>send (requests/sessions.py:697) (148 samples, 1.01%)</title><rect x="0.0340%" y="244" width="1.0051%" height="15" fill="rgb(208,68,35)"/><text x="0.2840%" y="254.50"></text></g><g><title>content (requests/models.py:831) (148 samples, 1.01%)</title><rect x="0.0340%" y="260" width="1.0051%" height="15" fill="rgb(232,128,0)"/><text x="0.2840%" y="270.50"></text></g><g><title>parse (apachelogs/parser.py:63) (653 samples, 4.43%)</title><rect x="2.0645%" y="212" width="4.4346%" height="15" fill="rgb(207,160,47)"/><text x="2.3145%" y="222.50">parse..</text></g><g><title>_strptime_datetime (_strptime.py:568) (581 samples, 3.95%)</title><rect x="7.9864%" y="260" width="3.9457%" height="15" fill="rgb(228,23,34)"/><text x="8.2364%" y="270.50">_str..</text></g><g><title>&lt;lambda&gt; (apachelogs/strftime.py:103) (775 samples, 5.26%)</title><rect x="7.6401%" y="244" width="5.2632%" height="15" fill="rgb(218,30,26)"/><text x="7.8901%" y="254.50">&lt;lambd..</text></g><g><title>&lt;lambda&gt; (apachelogs/util.py:20) (169 samples, 1.15%)</title><rect x="12.9915%" y="244" width="1.1477%" height="15" fill="rgb(220,122,19)"/><text x="13.2415%" y="254.50"></text></g><g><title>parse (apachelogs/parser.py:66) (1,281 samples, 8.70%)</title><rect x="6.5127%" y="212" width="8.6995%" height="15" fill="rgb(250,228,42)"/><text x="6.7627%" y="222.50">parse (apach..</text></g><g><title>&lt;listcomp&gt; (apachelogs/parser.py:67) (1,213 samples, 8.24%)</title><rect x="6.9745%" y="228" width="8.2377%" height="15" fill="rgb(240,193,28)"/><text x="7.2245%" y="238.50">&lt;listcomp&gt; ..</text></g><g><title>__init__ (apachelogs/parser.py:146) (194 samples, 1.32%)</title><rect x="18.6350%" y="228" width="1.3175%" height="15" fill="rgb(216,20,37)"/><text x="18.8850%" y="238.50"></text></g><g><title>__init__ (apachelogs/parser.py:151) (205 samples, 1.39%)</title><rect x="20.3192%" y="228" width="1.3922%" height="15" fill="rgb(206,188,39)"/><text x="20.5692%" y="238.50"></text></g><g><title>&lt;dictcomp&gt; (apachelogs/timeutil.py:142) (1,089 samples, 7.40%)</title><rect x="25.2632%" y="260" width="7.3956%" height="15" fill="rgb(217,207,13)"/><text x="25.5132%" y="270.50">&lt;dictcomp&gt;..</text></g><g><title>__getitem__ (calendar.py:82) (951 samples, 6.46%)</title><rect x="26.2003%" y="276" width="6.4584%" height="15" fill="rgb(231,73,38)"/><text x="26.4503%" y="286.50">__getite..</text></g><g><title>assemble_datetime (apachelogs/timeutil.py:142) (1,160 samples, 7.88%)</title><rect x="25.0866%" y="244" width="7.8778%" height="15" fill="rgb(225,20,46)"/><text x="25.3366%" y="254.50">assemble_da..</text></g><g><title>&lt;dictcomp&gt; (apachelogs/timeutil.py:145) (852 samples, 5.79%)</title><rect x="33.3650%" y="260" width="5.7861%" height="15" fill="rgb(210,31,41)"/><text x="33.6150%" y="270.50">&lt;dictco..</text></g><g><title>__getitem__ (calendar.py:82) (727 samples, 4.94%)</title><rect x="34.2139%" y="276" width="4.9372%" height="15" fill="rgb(221,200,47)"/><text x="34.4639%" y="286.50">__geti..</text></g><g><title>assemble_datetime (apachelogs/timeutil.py:145) (897 samples, 6.09%)</title><rect x="33.2428%" y="244" width="6.0917%" height="15" fill="rgb(226,26,5)"/><text x="33.4928%" y="254.50">assemble..</text></g><g><title>&lt;dictcomp&gt; (apachelogs/timeutil.py:200) (1,361 samples, 9.24%)</title><rect x="39.7555%" y="260" width="9.2428%" height="15" fill="rgb(249,33,26)"/><text x="40.0055%" y="270.50">&lt;dictcomp&gt; (a..</text></g><g><title>__getitem__ (calendar.py:63) (1,187 samples, 8.06%)</title><rect x="40.9372%" y="276" width="8.0611%" height="15" fill="rgb(235,183,28)"/><text x="41.1872%" y="286.50">__getitem__..</text></g><g><title>assemble_datetime (apachelogs/timeutil.py:200) (1,452 samples, 9.86%)</title><rect x="39.6944%" y="244" width="9.8608%" height="15" fill="rgb(221,5,38)"/><text x="39.9444%" y="254.50">assemble_datet..</text></g><g><title>&lt;dictcomp&gt; (apachelogs/timeutil.py:203) (1,284 samples, 8.72%)</title><rect x="49.7793%" y="260" width="8.7199%" height="15" fill="rgb(247,18,42)"/><text x="50.0293%" y="270.50">&lt;dictcomp&gt; (..</text></g><g><title>__getitem__ (calendar.py:63) (1,113 samples, 7.56%)</title><rect x="50.9406%" y="276" width="7.5586%" height="15" fill="rgb(241,131,45)"/><text x="51.1906%" y="286.50">__getitem_..</text></g><g><title>assemble_datetime (apachelogs/timeutil.py:203) (1,367 samples, 9.28%)</title><rect x="49.6774%" y="244" width="9.2835%" height="15" fill="rgb(249,31,29)"/><text x="49.9274%" y="254.50">assemble_date..</text></g><g><title>parse (apachelogs/parser.py:76) (6,434 samples, 43.69%)</title><rect x="16.4686%" y="212" width="43.6944%" height="15" fill="rgb(225,111,53)"/><text x="16.7186%" y="222.50">parse (apachelogs/parser.py:76)</text></g><g><title>__init__ (apachelogs/parser.py:162) (5,280 samples, 35.86%)</title><rect x="24.3056%" y="228" width="35.8574%" height="15" fill="rgb(238,160,17)"/><text x="24.5556%" y="238.50">__init__ (apachelogs/parser.py:162)</text></g><g><title>parse_log_line (apache_log_manager/log_mgmt/log_processor.py:55) (8,694 samples, 59.04%)</title><rect x="1.7861%" y="196" width="59.0424%" height="15" fill="rgb(214,148,48)"/><text x="2.0361%" y="206.50">parse_log_line (apache_log_manager/log_mgmt/log_processor.py:55)</text></g><g><title>_strptime_datetime (_strptime.py:568) (347 samples, 2.36%)</title><rect x="62.7436%" y="228" width="2.3565%" height="15" fill="rgb(232,36,49)"/><text x="62.9936%" y="238.50">_..</text></g><g><title>convert_to_logitem (apache_log_manager/log_mgmt/log_processor.py:78) (430 samples, 2.92%)</title><rect x="62.4109%" y="212" width="2.9202%" height="15" fill="rgb(209,103,24)"/><text x="62.6609%" y="222.50">co..</text></g><g><title>parse_log_line (apache_log_manager/log_mgmt/log_processor.py:56) (742 samples, 5.04%)</title><rect x="60.8285%" y="196" width="5.0390%" height="15" fill="rgb(229,88,8)"/><text x="61.0785%" y="206.50">parse_..</text></g><g><title>__repr__ (collections/__init__.py:421) (239 samples, 1.62%)</title><rect x="66.2343%" y="212" width="1.6231%" height="15" fill="rgb(213,181,19)"/><text x="66.4843%" y="222.50"></text></g><g><title>parse_log_line (apache_log_manager/log_mgmt/log_processor.py:57) (312 samples, 2.12%)</title><rect x="65.8676%" y="196" width="2.1188%" height="15" fill="rgb(254,191,54)"/><text x="66.1176%" y="206.50">p..</text></g><g><title>populate_logs (apache_log_manager/log_mgmt/log_processor.py:39) (9,811 samples, 66.63%)</title><rect x="1.3650%" y="180" width="66.6282%" height="15" fill="rgb(241,83,37)"/><text x="1.6150%" y="190.50">populate_logs (apache_log_manager/log_mgmt/log_processor.py:39)</text></g><g><title>populate_logs (apache_log_manager/log_mgmt/log_processor.py:40) (602 samples, 4.09%)</title><rect x="67.9932%" y="180" width="4.0883%" height="15" fill="rgb(233,36,39)"/><text x="68.2432%" y="190.50">popu..</text></g><g><title>adapt_datetimefield_value (django/db/backends/sqlite3/operations.py:247) (158 samples, 1.07%)</title><rect x="76.5637%" y="372" width="1.0730%" height="15" fill="rgb(226,3,54)"/><text x="76.8137%" y="382.50"></text></g><g><title>get_db_prep_value (django/db/models/fields/__init__.py:1428) (247 samples, 1.68%)</title><rect x="76.3396%" y="356" width="1.6774%" height="15" fill="rgb(245,192,40)"/><text x="76.5896%" y="366.50"></text></g><g><title>prepare_value (django/db/models/sql/compiler.py:1294) (557 samples, 3.78%)</title><rect x="75.1851%" y="324" width="3.7827%" height="15" fill="rgb(238,167,29)"/><text x="75.4351%" y="334.50">prep..</text></g><g><title>get_db_prep_save (django/db/models/fields/__init__.py:842) (513 samples, 3.48%)</title><rect x="75.4839%" y="340" width="3.4839%" height="15" fill="rgb(232,182,51)"/><text x="75.7339%" y="350.50">get..</text></g><g><title>as_sql (django/db/models/sql/compiler.py:1352) (785 samples, 5.33%)</title><rect x="73.6435%" y="276" width="5.3311%" height="15" fill="rgb(231,60,39)"/><text x="73.8935%" y="286.50">as_sql ..</text></g><g><title>&lt;listcomp&gt; (django/db/models/sql/compiler.py:1353) (781 samples, 5.30%)</title><rect x="73.6706%" y="292" width="5.3039%" height="15" fill="rgb(208,69,12)"/><text x="73.9206%" y="302.50">&lt;listc..</text></g><g><title>&lt;listcomp&gt; (django/db/models/sql/compiler.py:1353) (769 samples, 5.22%)</title><rect x="73.7521%" y="308" width="5.2224%" height="15" fill="rgb(235,93,37)"/><text x="74.0021%" y="318.50">&lt;listc..</text></g><g><title>assemble_as_sql (django/db/models/sql/compiler.py:1334) (319 samples, 2.17%)</title><rect x="78.9745%" y="292" width="2.1664%" height="15" fill="rgb(213,116,39)"/><text x="79.2245%" y="302.50">a..</text></g><g><title>&lt;genexpr&gt; (django/db/models/sql/compiler.py:1330) (306 samples, 2.08%)</title><rect x="79.0628%" y="308" width="2.0781%" height="15" fill="rgb(222,207,29)"/><text x="79.3128%" y="318.50">&lt;..</text></g><g><title>&lt;genexpr&gt; (django/db/models/sql/compiler.py:1324) (151 samples, 1.03%)</title><rect x="80.1154%" y="324" width="1.0255%" height="15" fill="rgb(206,96,30)"/><text x="80.3654%" y="334.50"></text></g><g><title>as_sql (django/db/models/sql/compiler.py:1367) (362 samples, 2.46%)</title><rect x="78.9745%" y="276" width="2.4584%" height="15" fill="rgb(218,138,4)"/><text x="79.2245%" y="286.50">as..</text></g><g><title>execute_sql (django/db/models/sql/compiler.py:1409) (1,188 samples, 8.07%)</title><rect x="73.5688%" y="260" width="8.0679%" height="15" fill="rgb(250,191,14)"/><text x="73.8188%" y="270.50">execute_sql..</text></g><g><title>last_executed_query (django/db/backends/sqlite3/operations.py:159) (416 samples, 2.83%)</title><rect x="81.6910%" y="324" width="2.8251%" height="15" fill="rgb(239,60,40)"/><text x="81.9410%" y="334.50">la..</text></g><g><title>_quote_params_for_last_executed_query (django/db/backends/sqlite3/operations.py:148) (398 samples, 2.70%)</title><rect x="81.8132%" y="340" width="2.7029%" height="15" fill="rgb(206,27,48)"/><text x="82.0632%" y="350.50">_q..</text></g><g><title>debug_sql (django/db/backends/utils.py:113) (440 samples, 2.99%)</title><rect x="81.6435%" y="308" width="2.9881%" height="15" fill="rgb(225,35,8)"/><text x="81.8935%" y="318.50">deb..</text></g><g><title>__exit__ (contextlib.py:120) (444 samples, 3.02%)</title><rect x="81.6435%" y="292" width="3.0153%" height="15" fill="rgb(250,213,24)"/><text x="81.8935%" y="302.50">__e..</text></g><g><title>execute_sql (django/db/models/sql/compiler.py:1410) (1,114 samples, 7.57%)</title><rect x="81.6367%" y="260" width="7.5654%" height="15" fill="rgb(247,123,22)"/><text x="81.8867%" y="270.50">execute_sq..</text></g><g><title>execute (django/db/backends/utils.py:98) (1,113 samples, 7.56%)</title><rect x="81.6435%" y="276" width="7.5586%" height="15" fill="rgb(231,138,38)"/><text x="81.8935%" y="286.50">execute (d..</text></g><g><title>execute (django/db/backends/utils.py:66) (669 samples, 4.54%)</title><rect x="84.6587%" y="292" width="4.5433%" height="15" fill="rgb(231,145,46)"/><text x="84.9087%" y="302.50">execu..</text></g><g><title>_execute_with_wrappers (django/db/backends/utils.py:75) (668 samples, 4.54%)</title><rect x="84.6655%" y="308" width="4.5365%" height="15" fill="rgb(251,118,11)"/><text x="84.9155%" y="318.50">_exec..</text></g><g><title>_execute (django/db/backends/utils.py:84) (668 samples, 4.54%)</title><rect x="84.6655%" y="324" width="4.5365%" height="15" fill="rgb(217,147,25)"/><text x="84.9155%" y="334.50">_exec..</text></g><g><title>execute (django/db/backends/sqlite3/base.py:423) (568 samples, 3.86%)</title><rect x="85.3447%" y="340" width="3.8574%" height="15" fill="rgb(247,81,37)"/><text x="85.5947%" y="350.50">exec..</text></g><g><title>_insert (django/db/models/query.py:1270) (2,320 samples, 15.76%)</title><rect x="73.4737%" y="244" width="15.7555%" height="15" fill="rgb(209,12,38)"/><text x="73.7237%" y="254.50">_insert (django/db/model..</text></g><g><title>bulk_create (django/db/models/query.py:514) (2,349 samples, 15.95%)</title><rect x="73.2835%" y="212" width="15.9525%" height="15" fill="rgb(227,1,9)"/><text x="73.5335%" y="222.50">bulk_create (django/db/mo..</text></g><g><title>_batched_insert (django/db/models/query.py:1293) (2,335 samples, 15.86%)</title><rect x="73.3786%" y="228" width="15.8574%" height="15" fill="rgb(248,47,43)"/><text x="73.6286%" y="238.50">_batched_insert (django/..</text></g><g><title>__exit__ (django/db/transaction.py:246) (1,520 samples, 10.32%)</title><rect x="89.3447%" y="228" width="10.3226%" height="15" fill="rgb(221,10,30)"/><text x="89.5947%" y="238.50">__exit__ (djang..</text></g><g><title>inner (django/utils/asyncio.py:26) (1,518 samples, 10.31%)</title><rect x="89.3582%" y="244" width="10.3090%" height="15" fill="rgb(210,229,1)"/><text x="89.6082%" y="254.50">inner (django/u..</text></g><g><title>commit (django/db/backends/base/base.py:266) (1,513 samples, 10.28%)</title><rect x="89.3922%" y="260" width="10.2750%" height="15" fill="rgb(222,148,37)"/><text x="89.6422%" y="270.50">commit (django/..</text></g><g><title>_commit (django/db/backends/base/base.py:242) (1,513 samples, 10.28%)</title><rect x="89.3922%" y="276" width="10.2750%" height="15" fill="rgb(234,67,33)"/><text x="89.6422%" y="286.50">_commit (django..</text></g><g><title>bulk_create (django/db/models/query.py:523) (1,543 samples, 10.48%)</title><rect x="89.2496%" y="212" width="10.4788%" height="15" fill="rgb(247,98,35)"/><text x="89.4996%" y="222.50">bulk_create (dj..</text></g><g><title>populate_logs (apache_log_manager/log_mgmt/log_processor.py:43) (4,077 samples, 27.69%)</title><rect x="72.1222%" y="180" width="27.6876%" height="15" fill="rgb(247,138,52)"/><text x="72.3722%" y="190.50">populate_logs (apache_log_manager/log_mgmt/l..</text></g><g><title>manager_method (django/db/models/manager.py:85) (4,076 samples, 27.68%)</title><rect x="72.1290%" y="196" width="27.6808%" height="15" fill="rgb(213,79,30)"/><text x="72.3790%" y="206.50">manager_method (django/db/models/manager.py:..</text></g><g><title>&lt;module&gt; (manage.py:22) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="68" width="99.9457%" height="15" fill="rgb(246,177,23)"/><text x="0.2772%" y="78.50">&lt;module&gt; (manage.py:22)</text></g><g><title>main (manage.py:18) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="84" width="99.9457%" height="15" fill="rgb(230,62,27)"/><text x="0.2772%" y="94.50">main (manage.py:18)</text></g><g><title>execute_from_command_line (django/core/management/__init__.py:419) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="100" width="99.9457%" height="15" fill="rgb(216,154,8)"/><text x="0.2772%" y="110.50">execute_from_command_line (django/core/management/__init__.py:419)</text></g><g><title>execute (django/core/management/__init__.py:413) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="116" width="99.9457%" height="15" fill="rgb(244,35,45)"/><text x="0.2772%" y="126.50">execute (django/core/management/__init__.py:413)</text></g><g><title>run_from_argv (django/core/management/base.py:354) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="132" width="99.9457%" height="15" fill="rgb(251,115,12)"/><text x="0.2772%" y="142.50">run_from_argv (django/core/management/base.py:354)</text></g><g><title>execute (django/core/management/base.py:398) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="148" width="99.9457%" height="15" fill="rgb(240,54,50)"/><text x="0.2772%" y="158.50">execute (django/core/management/base.py:398)</text></g><g><title>handle (apache_log_manager/log_mgmt/management/commands/process_log.py:23) (14,717 samples, 99.95%)</title><rect x="0.0272%" y="164" width="99.9457%" height="15" fill="rgb(233,84,52)"/><text x="0.2772%" y="174.50">handle (apache_log_manager/log_mgmt/management/commands/process_log.py:23)</text></g><g><title>all (14,725 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="46.50"></text></g><g><title>process 2585:&quot;python3 apache_log_manager/manage.py process_log http://www.almhuette-raith.at/apache-log/access.log&quot; (14,725 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="62.50">process 2585:&quot;python3 apache_log_manager/manage.py process_log http://www.almhuette-raith.at/apache-log/access.log&quot;</text></g></svg></svg>